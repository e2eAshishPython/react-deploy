{"version":3,"sources":["component/todolistApp/listItem.js","component/todolistApp/hometodo.js","App.js","serviceWorker.js","index.js"],"names":["listItem","ListItems","this","props","list","map","li","className","key","text","Component","hometodo","OnsubmitHandlet","e","_inputElement","value","newItem","Date","now","setState","prevState","concat","preventDefault","state","type","ref","a","id","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAgBeA,E,uKAZP,IACMC,EADOC,KAAKC,MAAMC,KACDC,KAAI,SAAAC,GAAE,OAAI,wBAAIC,UAAU,kBAAkBC,IAAKF,EAAGE,KAAxC,IAA+CF,EAAGG,KAAlD,QACjC,OACI,oCACI,wBAAIF,UAAU,+BACbN,Q,GAPMS,aCkDRC,G,wDAhDX,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IASVS,gBAAgB,SAACC,GAET,GAAgC,KAA7B,EAAKC,cAAcC,MACtB,CACI,IAAMC,EAAU,CACZP,KAAO,EAAKK,cAAcC,MAC1BP,IAAMS,KAAKC,KAIvB,EAAKC,UAAS,SAACC,GACX,MAAO,CAAEhB,KAAOgB,EAAUhB,KAAKiB,OAAOL,OAI1C,EAAKF,cAAcC,MAAQ,GAC3BF,EAAES,mBAvBF,EAAKC,MAAQ,CACRnB,KAAO,IAJG,E,qDAgCT,IAAD,OACL,OACI,yBAAKG,UAAU,iBACf,wBAAIA,UAAU,eAAd,iBAEA,yBAAKA,UAAU,aACX,2BAAOiB,KAAK,OAAOC,IAAK,SAACC,GAAD,OAAO,EAAKZ,cAAgBY,GAAIC,GAAG,UAC3D,4BAAQC,QAAS1B,KAAKU,gBAAiBY,KAAK,SAASjB,UAAU,mBAA/D,eAEA,kBAAC,EAAD,CAAUH,KAAMF,KAAKqB,MAAMnB,Y,GA1CpBM,cCSRmB,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9a17893.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass listItem extends Component {\r\n    render() {\r\n        const List = this.props.list\r\n        const ListItems = List.map(li => <li className='list-group-item' key={li.key}> {li.text} </li>)\r\n        return (\r\n            <>\r\n                <ul className='list-group list-group-flush'>\r\n                {ListItems}\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default listItem\r\n","import React, { Component } from 'react'\r\nimport ListItem from './listItem'\r\nimport './style.css'\r\nclass hometodo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             list : []\r\n            \r\n        }\r\n      \r\n    }\r\n\r\n    OnsubmitHandlet=(e)=>{\r\n       \r\n            if(this._inputElement.value !== \"\")\r\n            {\r\n                const newItem = {\r\n                    text : this._inputElement.value,\r\n                    key : Date.now\r\n                }\r\n            \r\n        \r\n        this.setState((prevState) =>{\r\n            return { list : prevState.list.concat(newItem)}\r\n            \r\n         \r\n        })\r\n        this._inputElement.value = \"\"\r\n        e.preventDefault();\r\n    }\r\n    }\r\n    \r\n   \r\n\r\n    render() {\r\n        return (\r\n            <div className='card col-sm-4'>\r\n            <h1 className='card-header'> To Do List  </h1>\r\n\r\n            <div className='card-body'>\r\n                <input type='text' ref={(a) => this._inputElement = a}  id='input' />\r\n                <button onClick={this.OnsubmitHandlet} type='submit' className='btn btn-primary' > Add Item </button>\r\n                </div>\r\n                <ListItem list={this.state.list}/>\r\n                \r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default hometodo\r\n","import React from 'react';\nimport './App.css';\nimport Hometodo from './component/todolistApp/hometodo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hometodo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}